stats.input$Treatment <- factor(stats.input$Sex)
stats.testing <- stats_cluster.animal(data = stats.input,
model = "percentage ~ Cluster*Sex + (1|MouseID)",
posthoc1 = "~Sex|Cluster",
posthoc2 = "~Sex|Cluster", adjust = "bonferroni")
cp %>%
ggplot(aes(x=Cluster, y=percentage, group=interaction(Cluster, Sex))) +
geom_boxplot(aes(group=interaction(Cluster, Sex), fill=Sex)) +
scale_fill_manual(values=c("#fde725","#482878")) +
geom_point(position=position_dodge(width=0.8), size=0.75, aes(group=interaction(Cluster,Sex), color=Sex)) +
ggtitle("Homeostatic Conditions") +
labs(fill="Sex") +
theme_bw(base_size=14) +
theme(axis.text.x=element_text(angle=45, vjust=1, hjust=1))
cp %>% # in this example, we filter for our brain region of interest
clusterpercentage_boxplots(Sex)
plot <- clusterplots(pca_kmeans, "PC1", "PC2")
clusterfeatures(pca_kmeans, featurestart=9, featureend=35)
#setting working directory
setwd("~") #set working directory
#loading packages
library(dplyr)
library(MicrogliaMorphologyR)
library(factoextra)
library(ppclust)
set.seed(1)
#5-10lines of your own code
#pvalue adjustment method, anova, ttest
#read in the data and know the row data that will be enough FOR NEXT TIME
#what do I need to check, do I need to normalize/remove outliers etc.
#saving the directory for the data
#loading in the two sample datasets
data_1xLPS <- MicrogliaMorphologyR::data_1xLPS_mouse
data_2xLPS <- MicrogliaMorphologyR::data_2xLPS_mouse
#filtering out only the control rows from each dataset
data_1xLPS_control <- filter(data_1xLPS, Treatment == 'PBS')
data_2xLPS_control <- filter(data_2xLPS, Treatment == 'PBS')
#removing the two columns that are extra in the second dataset (for ease of merging later)
data_2xLPS_control_mutated <- data_2xLPS_control[, -c(5, 6)]
#combining the two datasets
combined_control_data <- rbind(data_1xLPS_control, data_2xLPS_control_mutated)
#performing a log transformation on the relevant columns from the dataset
normalized_combined_control_data <-transform_log(combined_control_data, 1, start=7, end=33)
#plotting the dataset to explore PCA values
pcadata_elbow(normalized_combined_control_data, featurestart=7, featureend=33)
#
pca_data <- pcadata(normalized_combined_control_data, featurestart=7, featureend=33,
pc.start=1, pc.end=10)
pca_data_scale <- transform_scale(pca_data, start=1, end=3) # scale pca data as input for k-means clustering
kmeans_input <- pca_data_scale[1:3]
sampling <- kmeans_input[sample(nrow(kmeans_input), 5000),] #sample 5000 random rows for cluster optimization
fviz_nbclust(sampling, kmeans, method = 'wss', nstart=25, iter.max=50) # 4 clusters
fviz_nbclust(sampling, kmeans, method = 'silhouette', nstart=25, iter.max=50) # 4 clusters
# cluster and combine with original data
data_kmeans <- kmeans(kmeans_input, centers=4)
# Here, we are creating a new data frame that contains the first 2 PCs and original dataset, then renaming the data_kmeans$cluster column to simply say "Cluster". You can bind together as many of the PCs as you want. Binding the original, untransformed data is useful if you want to plot the raw values of any individual morphology measures downstream.
pca_kmeans <- cbind(pca_data[1:2], combined_control_data, as.data.frame(data_kmeans$cluster)) %>%
rename(Cluster=`data_kmeans$cluster`)
clusterfeatures(pca_kmeans, featurestart=9, featureend=33)
plot <- clusterplots(pca_kmeans, "PC1", "PC2")
clusterfeatures(pca_kmeans, featurestart=9, featureend=35)
#cluster 1 = hypertrophic (average territory span, high branch thickness as explained by pixel density in hull)
#cluster 2 = ramified (largest territory span and branching complexity)
#cluster 3 = ameboid (lowest territory span, high circularity, smallest branch lengths)
#cluster 4 = rod-like (greatest oblongness, lowest circularity)
cp <- clusterpercentage(pca_kmeans, "Cluster", MouseID, Sex)
cp <- cp %>% mutate(Cluster =
case_when(Cluster=="4" ~ "Rod-like",
Cluster=="3" ~ "Ameboid",
Cluster=="2" ~ "Ramified",
Cluster=="1" ~ "Hypertrophic"))
cp %>% clusterpercentage_boxplots(Sex)
stats.input <- cp
stats.input$MouseID <- factor(stats.input$MouseID)
stats.input$Cluster <- factor(stats.input$Cluster)
stats.input$Treatment <- factor(stats.input$Sex)
stats.testing <- stats_cluster.animal(data = stats.input,
model = "percentage ~ Cluster*Sex + (1|MouseID)",
posthoc1 = "~Sex|Cluster",
posthoc2 = "~Sex|Cluster", adjust = "bonferroni")
cp %>% # in this example, we filter for our brain region of interest
clusterpercentage_boxplots(Sex)
##############################
#Ameboid only
# Extracting the "Ameboid" cluster
ramified_cluster <- filter(pca_kmeans, Cluster == "2")
ramified_cluster <- ramified_cluster[, -c(1, 2)]
ramified_cluster <- ramified_cluster[, !(names(ramified_cluster) %in% c("Cluster"))]
normalized_ramified_cluster <- transform_log(ramified_cluster, 1, start=7, end=33)
#plotting the dataset to explore PCA values
pcadata_elbow(normalized_ramified_cluster, featurestart=7, featureend=33)
pca_data_ramified <- pcadata(normalized_ramified_cluster, featurestart=7, featureend=33,
pc.start=1, pc.end=10)
pca_data_scale_ramified <- transform_scale(pca_data_ramified, start=1, end=4)
kmeans_input_ramified <- pca_data_scale_ramified[1:4]
sampling_ramified <- kmeans_input_ramified[sample(nrow(kmeans_input_ramified), 5000),] #sample 5000 random rows for cluster optimization
fviz_nbclust(sampling_ramified, kmeans, method = 'wss', nstart=25, iter.max=50) # 5 clusters
fviz_nbclust(sampling_ramified, kmeans, method = 'silhouette', nstart=25, iter.max=50) # 5 clusters
# cluster and combine with original data
data_kmeans_ramified <- kmeans(kmeans_input_ramified, centers=5)
# Here, we are creating a new data frame that contains the first 2 PCs and original dataset, then renaming the data_kmeans$cluster column to simply say "Cluster". You can bind together as many of the PCs as you want. Binding the original, untransformed data is useful if you want to plot the raw values of any individual morphology measures downstream.
pca_kmeans_ramified <- cbind(pca_data_ramified[1:2], ramified_cluster, as.data.frame(data_kmeans_ramified$cluster)) %>%
rename(Cluster=`data_kmeans_ramified$cluster`)
clusterfeatures(pca_kmeans_ramified, featurestart=9, featureend=33)
# Selecting relevant columns: total area, branch area, and number of branches (update column names if needed)
ameboid_data <- ameboid_cluster %>%
select(MouseID, Sex, TotalArea = "Area", BranchArea = "Average branch length", NumBranches = "# of branches")
# Summary statistics by Sex for visual inspection
summary(ameboid_data)
# Performing ANOVA to assess differences between sexes for each feature
# Total Area
total_area_anova <- aov(TotalArea ~ Sex, data = ameboid_data)
summary(total_area_anova)
# Branch Area
branch_area_anova <- aov(BranchArea ~ Sex, data = ameboid_data)
summary(branch_area_anova)
# Number of Branches
num_branches_anova <- aov(NumBranches ~ Sex, data = ameboid_data)
summary(num_branches_anova)
# Post-hoc tests (if ANOVA shows significance)
if (summary(total_area_anova)[[1]][["Pr(>F)"]][1] < 0.05) {
posthoc_total_area <- TukeyHSD(total_area_anova)
print(posthoc_total_area)
}
if (summary(branch_area_anova)[[1]][["Pr(>F)"]][1] < 0.05) {
posthoc_branch_area <- TukeyHSD(branch_area_anova)
print(posthoc_branch_area)
}
if (summary(num_branches_anova)[[1]][["Pr(>F)"]][1] < 0.05) {
posthoc_num_branches <- TukeyHSD(num_branches_anova)
print(posthoc_num_branches)
}
#Ramified only
# Extracting the "Ramified" cluster
ramified_cluster <- filter(pca_kmeans, Cluster == "2")
# Selecting relevant columns: total area, branch area, and number of branches (update column names if needed)
ramified_data <- ramified_cluster %>%
select(Sex, TotalArea = "Area", BranchArea = "Average branch length", NumBranches = "# of branches")
# Summary statistics by Sex for visual inspection
summary(ramified_data)
# Performing ANOVA to assess differences between sexes for each feature
# Total Area
total_area_anova_ramified <- aov(TotalArea ~ Sex, data = ramified_data)
summary(total_area_anova_ramified)
View(total_area_anova_ramified)
# Branch Area
branch_area_anova_ramified <- aov(BranchArea ~ Sex, data = ramified_data)
summary(branch_area_anova_ramified)
# Number of Branches
num_branches_anova_ramified <- aov(NumBranches ~ Sex, data = ramified_data)
summary(num_branches_anova_ramified)
# Post-hoc tests (if ANOVA shows significance)
if (summary(total_area_anova_ramified)[[1]][["Pr(>F)"]][1] < 0.05) {
posthoc_total_area_ramified <- TukeyHSD(total_area_anova_ramified)
print(posthoc_total_area_ramified)
}
if (summary(branch_area_anova_ramified)[[1]][["Pr(>F)"]][1] < 0.05) {
posthoc_branch_area_ramified <- TukeyHSD(branch_area_anova_ramified)
print(posthoc_branch_area_ramified)
}
if (summary(num_branches_anova_ramified)[[1]][["Pr(>F)"]][1] < 0.05) {
posthoc_num_branches_ramified <- TukeyHSD(num_branches_anova_ramified)
print(posthoc_num_branches_ramified)
}
#prep the code that we are going to present
#one ttest or anova (review that!), which is the independent and which is the dependent variable
#for loop!!
sampling <- kmeans_input[sample(nrow(kmeans_input), 5000),] #sample 5000 random rows for cluster optimization
fviz_nbclust(sampling, kmeans, method = 'wss', nstart=25, iter.max=50) # 4 clusters
fviz_nbclust(sampling, kmeans, method = 'silhouette', nstart=25, iter.max=50) # 4 clusters
fviz_nbclust(sampling, kmeans, method = 'gap', nstart=25, iter.max=50)
fviz_nbclust(sampling, kmeans, method = 'silhouette', nstart=25, iter.max=50) # 4 clusters
fviz_nbclust(sampling, kmeans, method = 'silhouette', nstart=25, iter.max=50) # 4 clusters
data_kmeans <- kmeans(kmeans_input, centers=4)
sampling <- kmeans_input[sample(nrow(kmeans_input), 5000),] #sample 5000 random rows for cluster optimization
fviz_nbclust(kmeans_input, kmeans, method = 'silhouette', nstart=25, iter.max=50) # 4 clusters
fviz_nbclust(sampling, kmeans, method = 'silhouette', nstart=25, iter.max=50) # 4 clusters
#plotting the dataset to explore PCA values
pcadata_elbow(normalized_combined_control_data, featurestart=7, featureend=33)
fviz_nbclust(sampling, kmeans, method = 'silhouette', nstart=25, iter.max=50) # 4 clusters
clusterfeatures(pca_kmeans, featurestart=9, featureend=33)
?kmeans
stats.testing <- stats_cluster.animal(data = stats.input,
model = "percentage ~ Cluster*Sex",
posthoc1 = "~Sex|Cluster",
posthoc2 = "~Sex|Cluster", adjust = "bonferroni")
View(stats.testing)
stats.input <- cp
stats.testing <- stats_cluster.animal(data = stats.input,
model = "percentage ~ Cluster*Sex",
posthoc1 = "~Sex|Cluster",
posthoc2 = "~Sex|Cluster", adjust = "bonferroni")
View(stats.input)
cp %>% clusterpercentage_boxplots(Sex)
cp <- clusterpercentage(pca_kmeans, "Cluster", Sex)
cp <- cp %>% mutate(Cluster =
case_when(Cluster=="4" ~ "Rod-like",
Cluster=="3" ~ "Ameboid",
Cluster=="2" ~ "Ramified",
Cluster=="1" ~ "Hypertrophic"))
cp %>% clusterpercentage_boxplots(Sex)
cp <- clusterpercentage(pca_kmeans, "Cluster", MouseID, Sex)
cp <- cp %>% mutate(Cluster =
case_when(Cluster=="4" ~ "Rod-like",
Cluster=="3" ~ "Ameboid",
Cluster=="2" ~ "Ramified",
Cluster=="1" ~ "Hypertrophic"))
cp %>% clusterpercentage_boxplots(Sex)
?clusterpercentage
cp <- clusterpercentage(pca_kmeans, "Cluster", Sex)
View(cp)
cp <- cp %>% mutate(Cluster =
case_when(Cluster=="4" ~ "Rod-like",
Cluster=="3" ~ "Ameboid",
Cluster=="2" ~ "Ramified",
Cluster=="1" ~ "Hypertrophic"))
View(cp)
stats.testing <- stats_cluster.animal(data = stats.input,
model = "percentage ~ Cluster*Sex",
posthoc1 = "~Sex|Cluster",
posthoc2 = "~Sex|Cluster", adjust = "bonferroni")
cp %>% clusterpercentage_boxplots(Sex)
ggplot(cp, aes(x = Cluster, y = percentage, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Percentages by Gender",
x = "Cluster",
y = "Percentage (%)") +
scale_fill_manual(values = c("Female" = "purple", "Male" = "blue")) +
theme_minimal()
ggplot(cp, aes(x = Cluster, y = percentage, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Percentages by Gender",
x = "Cluster",
y = "Percentage (%)") +
scale_fill_manual(values = c("Female" = "purple", "Male" = "blue")) +
theme_minimal()
ggplot(cp, aes(x = Cluster, y = percentage, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Percentages by Gender",
x = "Cluster",
y = "Percentage (%)") +
scale_fill_manual(values = c("Female" = "purple", "Male" = "blue")) +
theme_minimal()
ggplot(cp, aes(x = Cluster, y = percentage, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Percentages by Gender",
x = "Cluster",
y = "Percentage (%)") +
scale_fill_manual(values = c("F" = "purple", "M" = "blue")) +
theme_minimal()
ggplot(cp, aes(x = Cluster, y = percentage, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Percentages by Gender",
x = "Cluster",
y = "Percentage (%)") +
scale_fill_manual(values = c("F" = "purple", "M" = "blue"))
ggplot(cp, aes(x = Cluster, y = percentage, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Comparison of Percentages by Gender",
x = "Cluster",
y = "Percentage (%)") +
scale_fill_manual(values = c("F" = "black", "M" = "white"))
#setting working directory
setwd("/Users/alexlawson/Documents/GitHub/MicrogliaMorphologyAnalysis") #set working directory
#loading packages
library(dplyr)
library(MicrogliaMorphologyR)
library(factoextra)
library(ppclust)
library(randomForest)
set.seed(1)
#loading in the two sample datasets
data_1xLPS <- MicrogliaMorphologyR::data_1xLPS_mouse
data_2xLPS <- MicrogliaMorphologyR::data_2xLPS_mouse
#removing the two columns that are extra in the second dataset (for ease of merging later)
data_2xLPS_mutated <- data_2xLPS[, -c(5, 6)]
#combining the two datasets
combined_data <- rbind(data_1xLPS, data_2xLPS_mutated)
#performing a log transformation on the relevant columns from the dataset
normalized_combined_data <-transform_log(combined_data, 1, start=7, end=33)
#saving dataset as separate file
write.csv(combined_data, "/Users/alexlawson/Documents/GitHub/MicrogliaMorphologyAnalysis/data.csv", row.names = FALSE)
#plotting the dataset to explore PCA values
pcadata_elbow(normalized_combined_data, featurestart=7, featureend=33)
#calculating pca data
pca_data <- pcadata(normalized_combined_data, featurestart=7, featureend=33,
pc.start=1, pc.end=10)
#normalizing first 3 PCA's
pca_data_scale <- transform_scale(pca_data, start=1, end=3) # scale pca data as input for k-means clustering
#kmeans sampling + kmeans clustering
kmeans_input <- pca_data_scale[1:3]
sampling <- kmeans_input[sample(nrow(kmeans_input), 5000),] #sample 5000 random rows for cluster optimization
fviz_nbclust(sampling, kmeans, method = 'silhouette', nstart=25, iter.max=50) # 4 clusters
data_kmeans <- kmeans(kmeans_input, centers=4)
# Here, we are creating a new data frame that contains the first 2 PCs and original dataset, then renaming the data_kmeans$cluster column to simply say "Cluster". You can bind together as many of the PCs as you want. Binding the original, untransformed data is useful if you want to plot the raw values of any individual morphology measures downstream.
pca_kmeans <- cbind(pca_data[1:2], combined_data, as.data.frame(data_kmeans$cluster)) %>%
rename(Cluster=`data_kmeans$cluster`)
#display cluster features in a heat map + plot
clusterfeatures(pca_kmeans, featurestart=9, featureend=35)
plot <- clusterplots(pca_kmeans, "PC1", "PC2")
pcfeaturecorrelations(pca_data, pc.start=1, pc.end=3,
feature.start=17, feature.end=43,
rthresh=0.75, pthresh=0.05,
title="Correlation between PCs and features")
#calculating percentage of microglia in each cluster and saving in a new dataframe
cp <- clusterpercentage(pca_kmeans, "Cluster", Sex, Treatment, MouseID)
cp$Treatment <- factor(cp$Treatment, levels=c("PBS","2xLPS", "LPS"))
#mutating cluster column to assign classically understood shapes to each group
cp <- cp %>% mutate(Cluster =
case_when(Cluster=="4" ~ "Ramified",
Cluster=="3" ~ "Ameboid",
Cluster=="2" ~ "Hypertrophic",
Cluster=="1" ~ "Rod-Like"))
#mutating pca_kmeans dataframe with cluster assignments for ease of analysis
pca_kmeans_w_cluster <- pca_kmeans %>% mutate(Cluster =
case_when(Cluster=="4" ~ "Ramified",
Cluster=="3" ~ "Ameboid",
Cluster=="2" ~ "Hypertrophic",
Cluster=="1" ~ "Rod-Like")
)
#Ensure 'Sex' and 'Treatment' are factors
stats_input <- cp
stats_input$MouseID <- factor(stats_input$MouseID)
stats_input$Cluster <- factor(stats_input$Cluster)
stats_input$Treatment <- factor(stats_input$Treatment)
stats_output <- stats_cluster.animal(data = stats_input,
model = "percentage ~ Sex*Cluster*Treatment",
posthoc1 = "~Treatment|Cluster|Sex",
posthoc2 = "~Treatment|Cluster")
stats_output <- stats_cluster.animal(data = stats_input,
model = "percentage ~ Sex*Cluster*Treatment",
posthoc1 = "~Treatment|Cluster|Sex",
posthoc2 = "~Treatment|Cluster")
stats_output <- stats_cluster.animal(data = stats_input,
model = "percentage ~ Sex*Cluster*Treatment",
posthoc1 = "~Treatment|Cluster|Sex",
posthoc2 = "~Treatment|Cluster")
stats_output[[2]]
stats_output[[3]]
normalized_supervised_data <-transform_log(combined_data, 1, start=7, end=33)
normalized_supervised_data$Sex <- as.factor(normalized_supervised_data$Sex)
normalized_supervised_data$Group <- as.factor(normalized_supervised_data$Treatment)
#calculating pca data
pca_data_supervised <- pcadata(normalized_supervised_data, featurestart=7, featureend=33,
pc.start=1, pc.end=10)
#normalizing first 3 PCA's
pca_data_normalized_supervised<- transform_scale(pca_data, start=1, end=3)
kmeans_result_supervised <- kmeans(pca_data_normalized_supervised[1:3], centers = 2)
table(kmeans_result_supervised$cluster, normalized_supervised_data$Sex)
colnames(normalized_supervised_data) <- gsub(" ", "_", colnames(normalized_supervised_data))
colnames(normalized_supervised_data) <- gsub("[\\(/)]", "_", colnames(normalized_supervised_data))
colnames(normalized_supervised_data) <- gsub("'", "", colnames(normalized_supervised_data))
colnames(normalized_supervised_data) <- gsub("#", "num", colnames(normalized_supervised_data))
rf_model <- randomForest(Sex ~ . - Antibody - MouseID - UniqueID - ID,
data = normalized_supervised_data,
importance = TRUE,
ntree = 500)
print(rf_model)
varImpPlot(rf_model)
# Foreground pixel density
ggplot(normalized_supervised_data, aes(x = Treatment, y = Density_of_foreground_pixels_in_hull_area, fill=Sex)) +
geom_boxplot() +
labs(title = "Distribution of Foreground Pixel Density by Sex",
x = "Treatment", y = "Density_of_foreground_pixels_in_hull_area", fill="Sex") +
theme_minimal()
# average branch length
ggplot(normalized_supervised_data, aes(x = Treatment, y = Average_branch_length, fill=Sex)) +
geom_boxplot() +
labs(title = "Distribution of Foreground Pixel Density by Sex",
x = "Treatment", y = "Average_branch_length", fill="Sex") +
theme_minimal()
stats_output[[2]]
stats_output <- stats_cluster.animal(data = stats_input,
model = "percentage ~ Sex*Cluster*Treatment",
posthoc1 = "~Treatment|Cluster|Sex",
posthoc2 = "~Sex|Cluster|Treatment")
stats_output[[3]]
#Performing individual stats on variables of interest
morphology_data <- combined_data %>%
group_by(MouseID, Sex, Treatment) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
#Performing individual stats on variables of interest
morphology_data <- combined_data %>%
group_by(Sex, Treatment) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
#Performing individual stats on variables of interest
morphology_data <- combined_data %>%
group_by(Sex, Treatment, MouseID) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
View(morphology_data)
stats.testing <- stats_morphologymeasures.animal(data = morphology_stats_input,
model = "Value ~ Treatment*Sex", type="lm",
posthoc1 = "~Treatment|Sex",
posthoc2 = "~Treatment*Sex", adjust = "bonferroni")
morphology_stats_input <- morphology_data
morphology_stats_input$Treatment <- factor(morphology_stats_input$Treatment)
morphology_stats_input$Sex <- factor(morphology_stats_input$Sex)
# run stats analysis for changes in individual morphology measures
# you can specify up to two posthoc comparisons (posthoc1 and posthoc2 arguments) - if you only have one set of posthocs to run, specify the same comparison twice for both arguments. you will just get the same results in output[[2]] and output[[3]].
stats.testing <- stats_morphologymeasures.animal(data = morphology_stats_input,
model = "Value ~ Treatment*Sex", type="lm",
posthoc1 = "~Treatment|Sex",
posthoc2 = "~Treatment*Sex", adjust = "bonferroni")
morphology_stats_testing <- stats_morphologymeasures.animal(data = morphology_stats_input,
model = "Value ~ Treatment*Sex", type="lm",
posthoc1 = "~Treatment|Sex",
posthoc2 = "~Treatment*Sex", adjust = "bonferroni")
stats.testing[[2]] %>% head(6)
stats.testing[[3]]%>%head(6)
morphology_stats_testing <- stats_morphologymeasures.animal(data = morphology_stats_input,
model = "Value ~ Treatment*Sex", type="lm",
posthoc1 = "~Treatment|Sex",
posthoc2 = "~Sex|Treatment", adjust = "bonferroni")
stats.testing[[3]]%>%head(6)
stats.testing[[2]]%>%head(6)
morphology_stats_testing <- stats_morphologymeasures.animal(data = morphology_stats_input,
model = "Value ~ Sex*Treatment", type="lm",
posthoc1 = "~Treatment|Sex",
posthoc2 = "~Sex|Treatment", adjust = "bonferroni")
stats.testing[[2]]%>%head(6)
stats.testing[[3]]%>%head(6)
stats.testing[[2]]
morphology_stats_testing <- stats_morphologymeasures.animal(data = morphology_stats_input,
model = "Value ~ Sex|Treatment", type="lm",
posthoc1 = "~Treatment|Sex",
posthoc2 = "~Sex|Treatment", adjust = "bonferroni")
morphology_stats_testing <- stats_morphologymeasures.animal(data = morphology_stats_input,
model = "Value ~ Sex|Treatment", type="lm",
posthoc1 = "~Treatment*Sex",
posthoc2 = "~Sex*Treatment", adjust = "bonferroni")
# you can specify up to two posthoc comparisons (posthoc1 and posthoc2 arguments) - if you only have one set of posthocs to run, specify the same comparison twice for both arguments. you will just get the same results in output[[2]] and output[[3]].
morphology_stats_testing <- stats_morphologymeasures.animal(data = morphology_stats_input,
model = "Value ~ Sex*Treatment", type="lm",
posthoc1 = "~Sex|Treatment",
posthoc2 = "~Sex*Treatment", adjust = "bonferroni")
stats.testing[[2]]
stats.testing[[3]]
getOption("max.print")
stats_output <- stats_cluster.animal(data = stats_input,
model = "percentage ~ Sex*Cluster*Treatment",
posthoc1 = "~Treatment|Cluster|Sex",
posthoc2 = "~Sex|Cluster|Treatment")
stats_output[[2]]
stats_output[[3]]
stats_output <- stats_cluster.animal(data = stats_input,
model = "percentage ~ Sex*Cluster*Treatment",
posthoc1 = "~Treatment|Cluster|Sex",
posthoc2 = "~Sex|Cluster*Treatment")
stats_output[[3]]
stats_output <- stats_cluster.animal(data = stats_input,
model = "percentage ~ Sex*Cluster*Treatment",
posthoc1 = "~Treatment|Cluster|Sex",
posthoc2 = "~Sex*Cluster|Treatment")
stats_output[[3]]
stats_output <- stats_cluster.animal(data = stats_input,
model = "percentage ~ Sex*Cluster*Treatment",
posthoc1 = "~Treatment|Cluster|Sex",
posthoc2 = "~Sex|Cluster|Treatment")
stats_output[[3]]
stats_output[[2]]
#Performing individual stats on variables of interest
morphology_data <- combined_data %>%
group_by(Sex, Treatment, MouseID) %>%
summarise(across("Foreground pixels":"Maximum branch length", ~mean(.x))) %>%
gather(Measure, Value, "Foreground pixels":"Maximum branch length")
morphology_stats_testing_filtered <- morphology_stats_input %>% filter(!Measure %in% c("Foreground pixels",
"Average branch length"))
"Average branch length"))
morphology_stats_testing <- stats_morphologymeasures.animal(data = morphology_stats_input,
model = "Value ~ Sex*Treatment", type="lm",
posthoc1 = "~Sex|Treatment",
posthoc2 = "~Sex*Treatment", adjust = "bonferroni")
stats.testing[[1]]
stats.testing[[2]]
morphology_stats_input_filtered <- morphology_stats_input %>% filter(!Measure %in% c("Foreground pixels",
"Average branch length"))
morphology_stats_testing_filtered <- stats_morphologymeasures.animal(data = morphology_stats_input_filtered,
model = "Value ~ Sex*Treatment", type="lm",
posthoc1 = "~Sex|Treatment",
posthoc2 = "~Sex*Treatment", adjust = "bonferroni")
stats.testing[[2]]
View(morphology_stats_input)
View(morphology_stats_input_filtered)
morphology_stats_input_filtered <- morphology_stats_input %>% filter(Measure %in% c("Foreground pixels",
"Average branch length"))
View(morphology_stats_input_filtered)
morphology_stats_testing_filtered <- stats_morphologymeasures.animal(data = morphology_stats_input_filtered,
model = "Value ~ Sex*Treatment", type="lm",
posthoc1 = "~Sex|Treatment",
posthoc2 = "~Sex*Treatment", adjust = "bonferroni")
stats.testing[[2]]
morphology_stats_testing_filtered[[2]]
morphology_stats_testing_filtered[[3]]
morphology_stats_testing_filtered <- stats_morphologymeasures.animal(data = morphology_stats_input_filtered,
model = "Value ~ Sex*Treatment", type="lm",
posthoc1 = "~Sex|Treatment",
posthoc2 = "~Sex*Treatment")
morphology_stats_testing_filtered[[3]]
morphology_stats_testing_filtered[[2]]
View(morphology_stats_input_filtered)
morphology_stats_testing_filtered <- stats_morphologymeasures.animal(data = morphology_stats_input_filtered,
model = "Value ~ Sex*Treatment", type="lm",
posthoc1 = "~Sex|Treatment",
posthoc2 = "~Sex")
morphology_stats_testing_filtered[[3]]
outliers_boxplots(combined_data)
combined_data_gathered <- combined_data %>% gather(measure, value, 7:ncol(combined_data))
outliers_boxplots(combined_data_gathered)
View(combined_data)
